{
  "id": "a9f62840-2827-11ec-9c0c-cbf3549779e5",
  "name": "LoadToBronze",
  "category": "pipeline",
  "layout": {
    "START_LOG": {
      "x": 493,
      "y": 64
    },
    "Load": {
      "x": 493,
      "y": 178
    },
    "ExecuteColumnCleanup": {
      "x": 398,
      "y": 281
    },
    "StandardizeColumnNames": {
      "x": 493,
      "y": 406
    },
    "AddRecordIdDecision": {
      "x": 384,
      "y": 529
    },
    "AddRecordId": {
      "x": 493,
      "y": 634
    },
    "AddFileIdDecision": {
      "x": 379,
      "y": 745
    },
    "AddFileId": {
      "x": 493,
      "y": 862
    },
    "AddStaticPartitionColumn": {
      "x": 379,
      "y": 973
    },
    "AddPartitionColumn": {
      "x": 493,
      "y": 1090
    },
    "Write": {
      "x": 383,
      "y": 1196
    },
    "StreamingMonitor": {
      "x": 493,
      "y": 1318
    },
    "END_LOG": {
      "x": 492,
      "y": 1432
    }
  },
  "steps": [
    {
      "id": "START_LOG",
      "displayName": "Log Message",
      "description": "Log a simple message",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "message",
          "required": true,
          "value": "Starting Load To Bronze",
          "parameterType": "String",
          "description": "The message to log"
        },
        {
          "type": "text",
          "name": "level",
          "required": true,
          "value": "INFO",
          "parameterType": "String",
          "description": "Log level at which to log. Should be a valid log4j level"
        }
      ],
      "engineMeta": {
        "spark": "LoggingSteps.logMessage",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "nextStepId": "Load",
      "stepId": "931ad4e5-4501-4716-853a-30fbf8fb6090"
    },
    {
      "id": "Load",
      "displayName": "Load",
      "description": "This step will create a DataFrame using the given DataConnector",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "connector",
          "required": true,
          "value": "!sourceBronzeConnector",
          "parameterType": "com.acxiom.pipeline.connectors.DataConnector",
          "description": "The data connector to use when writing"
        },
        {
          "type": "text",
          "name": "source",
          "required": false,
          "value": "!sourceBronzePath",
          "parameterType": "String",
          "description": "The source path to load data"
        },
        {
          "type": "object",
          "name": "readOptions",
          "required": false,
          "value": "!sourceBronzeReadOptions",
          "className": "com.acxiom.pipeline.steps.DataFrameReaderOptions",
          "parameterType": "com.acxiom.pipeline.steps.DataFrameReaderOptions",
          "description": "The optional options to use while reading the data"
        }
      ],
      "engineMeta": {
        "spark": "DataConnectorSteps.loadDataFrame",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "org.apache.spark.sql.DataFrame"
        }
      },
      "nextStepId": "ExecuteColumnCleanup",
      "stepId": "836aab38-1140-4606-ab73-5b6744f0e7e7"
    },
    {
      "id": "ExecuteColumnCleanup",
      "displayName": "String Equals",
      "description": "Return whether string1 equals string2",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "string",
          "required": true,
          "value": "!executeColumnCleanup || true",
          "description": "The string to compare"
        },
        {
          "type": "text",
          "name": "anotherString",
          "required": true,
          "value": "true",
          "description": "The other string to compare"
        },
        {
          "type": "boolean",
          "name": "caseInsensitive",
          "required": false,
          "value": true,
          "description": "Boolean flag to indicate case sensitive compare"
        },
        {
          "type": "result",
          "name": "true",
          "required": false,
          "value": "StandardizeColumnNames",
          "description": ""
        },
        {
          "type": "result",
          "name": "false",
          "required": false,
          "value": "AddRecordIdDecision",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "StringSteps.stringEquals",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "Boolean"
        }
      },
      "stepId": "3fabf9ec-5383-4eb3-81af-6092ab7c370d"
    },
    {
      "id": "StandardizeColumnNames",
      "displayName": "Standardize Column Names on a DataFrame",
      "description": "This step will standardize columns names on existing dataframe",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "dataFrame",
          "required": false,
          "value": "@Load",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "TransformationSteps.standardizeColumnNames",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "nextStepId": "AddRecordIdDecision",
      "stepId": "a981080d-714c-4d36-8b09-d95842ec5655"
    },
    {
      "id": "AddRecordIdDecision",
      "displayName": "String Equals",
      "description": "Return whether string1 equals string2",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "string",
          "required": true,
          "value": "!addRecordId || true",
          "description": "The string to compare"
        },
        {
          "type": "text",
          "name": "anotherString",
          "required": true,
          "value": "true",
          "description": "The other string to compare"
        },
        {
          "type": "boolean",
          "name": "caseInsensitive",
          "required": false,
          "value": true,
          "description": "Boolean flag to indicate case sensitive compare"
        },
        {
          "type": "result",
          "name": "true",
          "required": false,
          "value": "AddRecordId",
          "description": ""
        },
        {
          "type": "result",
          "name": "false",
          "required": false,
          "value": "AddFileIdDecision",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "StringSteps.stringEquals",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "Boolean"
        }
      },
      "stepId": "3fabf9ec-5383-4eb3-81af-6092ab7c370d"
    },
    {
      "id": "AddRecordId",
      "displayName": "Adds a Unique Identifier to a DataFrame",
      "description": "This step will add a new unique identifier to an existing data frame",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "idColumnName",
          "required": false,
          "value": "metalus_record_id",
          "description": ""
        },
        {
          "type": "text",
          "name": "dataFrame",
          "required": false,
          "value": "@StandardizeColumnNames || @LoadDataFrame",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "DataSteps.addUniqueIdToDataFrame",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "nextStepId": "AddFileIdDecision",
      "stepId": "9f7d84b0-ebab-57da-8b39-be4c47028242"
    },
    {
      "id": "AddFileIdDecision",
      "displayName": "String Equals",
      "description": "Return whether string1 equals string2",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "string",
          "required": true,
          "value": "!addFileId || true",
          "description": "The string to compare"
        },
        {
          "type": "text",
          "name": "anotherString",
          "required": true,
          "value": "true",
          "description": "The other string to compare"
        },
        {
          "type": "boolean",
          "name": "caseInsensitive",
          "required": false,
          "value": true,
          "description": "Boolean flag to indicate case sensitive compare"
        },
        {
          "type": "result",
          "name": "true",
          "required": false,
          "value": "AddFileId",
          "description": ""
        },
        {
          "type": "result",
          "name": "false",
          "required": false,
          "value": "AddStaticPartitionColumn",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "StringSteps.stringEquals",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "Boolean"
        }
      },
      "stepId": "3fabf9ec-5383-4eb3-81af-6092ab7c370d"
    },
    {
      "id": "AddFileId",
      "displayName": "Add a Column with a Static Value to All Rows in a DataFrame",
      "description": "This step will add a column with a static value to all rows in the provided data frame",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "dataFrame",
          "required": false,
          "value": "@AddRecordId || @StandardizeColumnNames || @LoadDataFrame",
          "description": ""
        },
        {
          "type": "text",
          "name": "columnName",
          "required": false,
          "value": "metalus_file_id",
          "description": ""
        },
        {
          "type": "text",
          "name": "columnValue",
          "required": false,
          "value": "!fileId",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "DataSteps.addStaticColumnToDataFrame",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "nextStepId": "AddStaticPartitionColumn",
      "stepId": "37e10488-02c1-5c85-b47a-efecf681fdd4"
    },
    {
      "id": "AddStaticPartitionColumn",
      "displayName": "String Equals",
      "description": "Return whether string1 equals string2",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "string",
          "required": true,
          "value": "!AddPartitionColumn",
          "parameterType": "String",
          "description": "The string to compare"
        },
        {
          "type": "text",
          "name": "anotherString",
          "required": true,
          "value": "true",
          "parameterType": "String",
          "description": "The other string to compare"
        },
        {
          "type": "boolean",
          "name": "caseInsensitive",
          "required": false,
          "value": true,
          "parameterType": "Boolean",
          "description": "Boolean flag to indicate case sensitive compare"
        },
        {
          "type": "result",
          "name": "true",
          "required": false,
          "value": "AddPartitionColumn",
          "description": ""
        },
        {
          "type": "result",
          "name": "false",
          "required": false,
          "value": "Write",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "StringSteps.stringEquals",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "Boolean"
        }
      },
      "stepId": "3fabf9ec-5383-4eb3-81af-6092ab7c370d"
    },
    {
      "id": "AddPartitionColumn",
      "displayName": "Add a Column with a Static Value to All Rows in a DataFrame (metalus-common)",
      "description": "This step will add a column with a static value to all rows in the provided data frame",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "dataFrame",
          "required": true,
          "value": "@AddFileId || @AddRecordId || @StandardizeColumnNames || @Load",
          "parameterType": "org.apache.spark.sql.Dataset[_]",
          "description": "The data frame to add the column"
        },
        {
          "type": "text",
          "name": "columnName",
          "required": true,
          "value": "!partitionColumnNameBronze || partition_column",
          "parameterType": "String",
          "description": "The name to provide the id column"
        },
        {
          "type": "text",
          "name": "columnValue",
          "required": true,
          "value": "!PARTITION_VALUE",
          "parameterType": "Any",
          "description": "The name of the new column"
        },
        {
          "type": "boolean",
          "name": "standardizeColumnName",
          "required": false,
          "defaultValue": "true",
          "value": false,
          "parameterType": "Boolean",
          "description": "The value to add"
        }
      ],
      "engineMeta": {
        "spark": "DataSteps.addStaticColumnToDataFrame",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "org.apache.spark.sql.DataFrame"
        }
      },
      "nextStepId": "Write",
      "stepId": "80583aa9-41b7-4906-8357-cc2d3670d970"
    },
    {
      "id": "Write",
      "displayName": "Write",
      "description": "This step will write a DataFrame using the given DataConnector",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "dataFrame",
          "required": true,
          "value": "@AddPartitionColumn || @AddFileId || @AddRecordId || @StandardizeColumnNames || @Load",
          "parameterType": "org.apache.spark.sql.DataFrame",
          "description": "The DataFrame to write"
        },
        {
          "type": "text",
          "name": "connector",
          "required": true,
          "value": "!destinationBronzeConnector",
          "parameterType": "com.acxiom.pipeline.connectors.DataConnector",
          "description": "The data connector to use when writing"
        },
        {
          "type": "text",
          "name": "destination",
          "required": false,
          "value": "!destinationBronzePath",
          "parameterType": "String",
          "description": "The destination path to write data"
        },
        {
          "type": "object",
          "name": "writeOptions",
          "required": false,
          "value": "!destinationBronzeWriteOptions",
          "className": "com.acxiom.pipeline.steps.DataFrameWriterOptions",
          "parameterType": "com.acxiom.pipeline.steps.DataFrameWriterOptions",
          "description": "The optional DataFrame options to use while writing"
        }
      ],
      "engineMeta": {
        "spark": "DataConnectorSteps.writeDataFrame",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "org.apache.spark.sql.streaming.StreamingQuery"
        }
      },
      "nextStepId": "StreamingMonitor",
      "stepId": "5608eba7-e9ff-48e6-af77-b5e810b99d89"
    },
    {
      "id": "StreamingMonitor",
      "displayName": "Streaming Monitor",
      "description": "Given a StreamingQuery, this step will invoke the monitor thread and wait while records are processed. The monitor class will be used to stop the query and determine if further processing should occur.",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "query",
          "required": false,
          "value": "@Write",
          "parameterType": "org.apache.spark.sql.streaming.StreamingQuery",
          "description": "The streaming query to monitor"
        },
        {
          "type": "text",
          "name": "streamingMonitorClassName",
          "required": false,
          "value": "!STREAMING_MONITOR_CLASS_NAME || com.acxiom.pipeline.streaming.BaseStreamingQueryMonitor",
          "parameterType": "String",
          "description": "Fully qualified classname of the monitor class"
        },
        {
          "type": "result",
          "name": "continue",
          "required": false,
          "value": "Load",
          "description": ""
        },
        {
          "type": "result",
          "name": "stop",
          "required": false,
          "value": "END_LOG",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "FlowUtilsSteps.monitorStreamingQuery",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "com.acxiom.pipeline.PipelineStepResponse"
        }
      },
      "stepId": "64c983e2-5eac-4fb6-87b2-024b69aa0ded"
    },
    {
      "id": "END_LOG",
      "displayName": "Log Message",
      "description": "Log a simple message",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "message",
          "required": true,
          "value": "Finished Load To Bronze Pipeline. Streaming was not used.",
          "parameterType": "String",
          "description": "The message to log"
        },
        {
          "type": "text",
          "name": "level",
          "required": true,
          "value": "INFO",
          "parameterType": "String",
          "description": "Log level at which to log. Should be a valid log4j level"
        }
      ],
      "engineMeta": {
        "spark": "LoggingSteps.logMessage",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "executeIfEmpty": "@Write",
      "stepId": "931ad4e5-4501-4716-853a-30fbf8fb6090"
    }
  ]
}
