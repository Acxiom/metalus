{
  "id": "a9f62840-2827-11ec-9c0c-cbf3549779e5",
  "name": "LoadToBronze",
  "category": "pipeline",
  "description": "Loads data from thee provided source location, performs optional tasks such as standardizing column names, adding a unique record id, adding the file id and adding a partition column. This pipeline also supports streaming connectors and may be used as the final pipeline in a streaming query.",
  "layout": {
    "START_LOG": {
      "x": 491,
      "y": 32
    },
    "Load": {
      "x": 491,
      "y": 146
    },
    "ExecuteColumnCleanup": {
      "x": 441.5,
      "y": 260
    },
    "StandardizeColumnNames": {
      "x": 491,
      "y": 374
    },
    "AddRecordIdDecision": {
      "x": 441.5,
      "y": 488
    },
    "AddRecordId": {
      "x": 491,
      "y": 602
    },
    "AddFileIdDecision": {
      "x": 441.5,
      "y": 716
    },
    "AddFileId": {
      "x": 491,
      "y": 830
    },
    "AddStaticPartitionColumn": {
      "x": 441.5,
      "y": 944
    },
    "AddPartitionColumn": {
      "x": 491,
      "y": 1058
    },
    "Write": {
      "x": 441.5,
      "y": 1172
    },
    "StreamingMonitor": {
      "x": 491,
      "y": 1286
    },
    "END_LOG": {
      "x": 491,
      "y": 1400
    }
  },
  "steps": [
    {
      "id": "START_LOG",
      "displayName": "Log Message",
      "description": "Logs the start of the pipeline",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "message",
          "required": true,
          "value": "Starting Load To Bronze",
          "parameterType": "String",
          "description": "Indicates that the logging pipeline has started"
        },
        {
          "type": "text",
          "name": "level",
          "required": true,
          "value": "INFO",
          "parameterType": "String",
          "description": "Setting the log to info."
        }
      ],
      "engineMeta": {
        "spark": "LoggingSteps.logMessage",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "nextStepId": "Load",
      "stepId": "931ad4e5-4501-4716-853a-30fbf8fb6090"
    },
    {
      "id": "Load",
      "displayName": "Load",
      "description": "Loads the data using the specified connector information",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "connector",
          "required": true,
          "value": "!sourceBronzeConnector",
          "parameterType": "com.acxiom.pipeline.connectors.DataConnector",
          "description": "Maps the connector using the sourceBronzeConnector global"
        },
        {
          "type": "text",
          "name": "source",
          "required": false,
          "value": "!sourceBronzePath",
          "parameterType": "String",
          "description": "Maps the path using the sourceBronzePath global"
        },
        {
          "type": "object",
          "name": "readOptions",
          "required": false,
          "value": "!sourceBronzeReadOptions",
          "className": "com.acxiom.pipeline.steps.DataFrameReaderOptions",
          "parameterType": "com.acxiom.pipeline.steps.DataFrameReaderOptions",
          "description": "Maps the read options from the sourceBronzeReadOptions global"
        }
      ],
      "engineMeta": {
        "spark": "DataConnectorSteps.loadDataFrame",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "org.apache.spark.sql.DataFrame"
        }
      },
      "nextStepId": "ExecuteColumnCleanup",
      "stepId": "836aab38-1140-4606-ab73-5b6744f0e7e7"
    },
    {
      "id": "ExecuteColumnCleanup",
      "displayName": "String Equals",
      "description": "Determines whether column names should be standardized",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "string",
          "required": true,
          "value": "!executeColumnCleanup || true",
          "description": "Uses the value from the executeColumnCleanup global. A value of true is required to run the cleanup. Default is true,"
        },
        {
          "type": "text",
          "name": "anotherString",
          "required": true,
          "value": "true",
          "description": "This value (true) is compared against the mapped value."
        },
        {
          "type": "boolean",
          "name": "caseInsensitive",
          "required": false,
          "value": true,
          "description": "Set to ignore the case of the mapped value."
        },
        {
          "type": "result",
          "name": "true",
          "required": false,
          "value": "StandardizeColumnNames",
          "description": ""
        },
        {
          "type": "result",
          "name": "false",
          "required": false,
          "value": "AddRecordIdDecision",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "StringSteps.stringEquals",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "Boolean"
        }
      },
      "stepId": "3fabf9ec-5383-4eb3-81af-6092ab7c370d"
    },
    {
      "id": "StandardizeColumnNames",
      "displayName": "Standardize Column Names on a DataFrame",
      "description": "This step will standardize columns names on existing dataframe",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "dataFrame",
          "required": false,
          "value": "@Load",
          "description": "The data from the Load step."
        }
      ],
      "engineMeta": {
        "spark": "TransformationSteps.standardizeColumnNames",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "nextStepId": "AddRecordIdDecision",
      "stepId": "a981080d-714c-4d36-8b09-d95842ec5655"
    },
    {
      "id": "AddRecordIdDecision",
      "displayName": "String Equals",
      "description": "Determines whether a record id should be added to each row",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "string",
          "required": true,
          "value": "!addRecordId || $useRecordId || true",
          "description": "Maps the value from the addRecordId global or useRecordId runtime parameter to determine whether to add a record id to the data"
        },
        {
          "type": "text",
          "name": "anotherString",
          "required": true,
          "value": "true",
          "description": "This value (true) is compared against the mapped value."
        },
        {
          "type": "boolean",
          "name": "caseInsensitive",
          "required": false,
          "value": true,
          "description": "Set to ignore the case of the mapped value."
        },
        {
          "type": "result",
          "name": "true",
          "required": false,
          "value": "AddRecordId",
          "description": ""
        },
        {
          "type": "result",
          "name": "false",
          "required": false,
          "value": "AddFileIdDecision",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "StringSteps.stringEquals",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "Boolean"
        }
      },
      "stepId": "3fabf9ec-5383-4eb3-81af-6092ab7c370d"
    },
    {
      "id": "AddRecordId",
      "displayName": "Adds a Unique Identifier to a DataFrame",
      "description": "This step will add a new unique identifier to an existing data frame",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "idColumnName",
          "required": false,
          "value": "metalus_record_id",
          "description": "The name of the column that will contain the new column. The column will be named metalus_record_id."
        },
        {
          "type": "text",
          "name": "dataFrame",
          "required": false,
          "value": "@StandardizeColumnNames || @LoadDataFrame",
          "description": "The current data set"
        }
      ],
      "engineMeta": {
        "spark": "DataSteps.addUniqueIdToDataFrame",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "nextStepId": "AddFileIdDecision",
      "stepId": "9f7d84b0-ebab-57da-8b39-be4c47028242"
    },
    {
      "id": "AddFileIdDecision",
      "displayName": "String Equals",
      "description": "Determines whether the file id should be added to each record",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "string",
          "required": true,
          "value": "!addFileId || true",
          "description": "Maps the value from the addFileId global. Default is true."
        },
        {
          "type": "text",
          "name": "anotherString",
          "required": true,
          "value": "true",
          "description": "This value (true) is compared against the mapped value."
        },
        {
          "type": "boolean",
          "name": "caseInsensitive",
          "required": false,
          "value": true,
          "description": "Set to ignore the case of the mapped value."
        },
        {
          "type": "result",
          "name": "true",
          "required": false,
          "value": "AddFileId",
          "description": ""
        },
        {
          "type": "result",
          "name": "false",
          "required": false,
          "value": "AddStaticPartitionColumn",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "StringSteps.stringEquals",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "Boolean"
        }
      },
      "stepId": "3fabf9ec-5383-4eb3-81af-6092ab7c370d"
    },
    {
      "id": "AddFileId",
      "displayName": "Add a Column with a Static Value to All Rows in a DataFrame",
      "description": "This step will add a column with a static value to all rows in the provided data frame",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "dataFrame",
          "required": false,
          "value": "@AddRecordId || @StandardizeColumnNames || @LoadDataFrame",
          "description": "The current data set"
        },
        {
          "type": "text",
          "name": "columnName",
          "required": false,
          "value": "metalus_file_id",
          "description": "Sets the column name to metalus_file_id."
        },
        {
          "type": "text",
          "name": "columnValue",
          "required": false,
          "value": "!fileId",
          "description": "Maps the value from the fileId global"
        }
      ],
      "engineMeta": {
        "spark": "DataSteps.addStaticColumnToDataFrame",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "nextStepId": "AddStaticPartitionColumn",
      "stepId": "80583aa9-41b7-4906-8357-cc2d3670d970"
    },
    {
      "id": "AddStaticPartitionColumn",
      "displayName": "String Equals",
      "description": "Determines whether a column should be added to each record that can be used for partitioning the data",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "string",
          "required": true,
          "value": "!AddPartitionColumn",
          "parameterType": "String",
          "description": "Maps the value from the AddPartitionColumn global"
        },
        {
          "type": "text",
          "name": "anotherString",
          "required": true,
          "value": "true",
          "parameterType": "String",
          "description": "This value (true) is compared against the mapped value."
        },
        {
          "type": "boolean",
          "name": "caseInsensitive",
          "required": false,
          "value": true,
          "parameterType": "Boolean",
          "description": "Set to ignore the case of the mapped value."
        },
        {
          "type": "result",
          "name": "true",
          "required": false,
          "value": "AddPartitionColumn",
          "description": ""
        },
        {
          "type": "result",
          "name": "false",
          "required": false,
          "value": "Write",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "StringSteps.stringEquals",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "Boolean"
        }
      },
      "stepId": "3fabf9ec-5383-4eb3-81af-6092ab7c370d"
    },
    {
      "id": "AddPartitionColumn",
      "displayName": "Add a Column with a Static Value to All Rows in a DataFrame (metalus-common)",
      "description": "This step will add a column with a static value to all rows in the provided data frame",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "dataFrame",
          "required": true,
          "value": "@AddFileId || @AddRecordId || @StandardizeColumnNames || @Load",
          "parameterType": "org.apache.spark.sql.Dataset[_]",
          "description": "The current data set"
        },
        {
          "type": "text",
          "name": "columnName",
          "required": true,
          "value": "!partitionColumnNameBronze || partition_column",
          "parameterType": "String",
          "description": "Maps the value of the partitionColumnNameBronze global or defaults to partition_column."
        },
        {
          "type": "text",
          "name": "columnValue",
          "required": true,
          "value": "!PARTITION_VALUE",
          "parameterType": "Any",
          "description": "Maps the value of the PARTITION_VALUE global."
        },
        {
          "type": "boolean",
          "name": "standardizeColumnName",
          "required": false,
          "defaultValue": "true",
          "value": false,
          "parameterType": "Boolean",
          "description": "Set to false so the mapped value is used as is."
        }
      ],
      "engineMeta": {
        "spark": "DataSteps.addStaticColumnToDataFrame",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "org.apache.spark.sql.DataFrame"
        }
      },
      "nextStepId": "Write",
      "stepId": "80583aa9-41b7-4906-8357-cc2d3670d970"
    },
    {
      "id": "Write",
      "displayName": "Write",
      "description": "This step will write a DataFrame using the given DataConnector",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "dataFrame",
          "required": true,
          "value": "@AddPartitionColumn || @AddFileId || @AddRecordId || @StandardizeColumnNames || @Load",
          "parameterType": "org.apache.spark.sql.DataFrame",
          "description": "The current data set."
        },
        {
          "type": "text",
          "name": "connector",
          "required": true,
          "value": "!destinationBronzeConnector",
          "parameterType": "com.acxiom.pipeline.connectors.DataConnector",
          "description": "Maps the value from the destinationBronzeConnector global."
        },
        {
          "type": "text",
          "name": "destination",
          "required": false,
          "value": "!destinationBronzePath",
          "parameterType": "String",
          "description": "Maps the value from the destinationBronzePath global."
        },
        {
          "type": "object",
          "name": "writeOptions",
          "required": false,
          "value": "!destinationBronzeWriteOptions",
          "className": "com.acxiom.pipeline.steps.DataFrameWriterOptions",
          "parameterType": "com.acxiom.pipeline.steps.DataFrameWriterOptions",
          "description": "Maps the value from the destinationBronzeWriteOptions global."
        }
      ],
      "engineMeta": {
        "spark": "DataConnectorSteps.writeDataFrame",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "org.apache.spark.sql.streaming.StreamingQuery"
        }
      },
      "nextStepId": "StreamingMonitor",
      "stepId": "5608eba7-e9ff-48e6-af77-b5e810b99d89"
    },
    {
      "id": "StreamingMonitor",
      "displayName": "Streaming Monitor",
      "description": "Given a StreamingQuery, this step will invoke the monitor thread and wait while records are processed. The monitor class will be used to stop the query and determine if further processing should occur.",
      "type": "branch",
      "params": [
        {
          "type": "text",
          "name": "query",
          "required": false,
          "value": "@Write",
          "parameterType": "org.apache.spark.sql.streaming.StreamingQuery",
          "description": "The streaming query from the Write step if a streaming connector was used."
        },
        {
          "type": "text",
          "name": "streamingMonitorClassName",
          "required": false,
          "value": "!STREAMING_MONITOR_CLASS_NAME || com.acxiom.pipeline.streaming.BaseStreamingQueryMonitor",
          "parameterType": "String",
          "description": "Maps the value from the STREAMING_MONITOR_CLASS_NAME global. The default class used is com.acxiom.pipeline.streaming.BaseStreamingQueryMonitor which will continue running."
        },
        {
          "type": "result",
          "name": "continue",
          "required": false,
          "value": "Load",
          "description": ""
        },
        {
          "type": "result",
          "name": "stop",
          "required": false,
          "value": "END_LOG",
          "description": ""
        }
      ],
      "engineMeta": {
        "spark": "FlowUtilsSteps.monitorStreamingQuery",
        "pkg": "com.acxiom.pipeline.steps",
        "results": {
          "primaryType": "com.acxiom.pipeline.PipelineStepResponse"
        }
      },
      "stepId": "64c983e2-5eac-4fb6-87b2-024b69aa0ded"
    },
    {
      "id": "END_LOG",
      "displayName": "Log Message",
      "description": "Log a simple message",
      "type": "Pipeline",
      "params": [
        {
          "type": "text",
          "name": "message",
          "required": true,
          "value": "Finished Load To Bronze Pipeline. Streaming was not used.",
          "parameterType": "String",
          "description": "Adds a log message that the pipeline has completed."
        },
        {
          "type": "text",
          "name": "level",
          "required": true,
          "value": "INFO",
          "parameterType": "String",
          "description": "Setting the log to info."
        }
      ],
      "engineMeta": {
        "spark": "LoggingSteps.logMessage",
        "pkg": "com.acxiom.pipeline.steps"
      },
      "executeIfEmpty": "@Write",
      "stepId": "931ad4e5-4501-4716-853a-30fbf8fb6090"
    }
  ]
}
