[
  {
    "id": "LOAD_DATA_PIPELINE",
    "name": "Load Data Pipeline",
    "steps": [
      {
        "id": "READHEADERSTEP",
        "stepId": "100b2c7d-c1fb-5fe2-b9d1-dd9fff103272",
        "displayName": "Read header from a file",
        "description": "This step will load the first line of a file and parse it into column names",
        "type": "Pipeline",
        "nextStepId": "CREATESCHEMASTEP",
        "params": [
          {
            "type": "string",
            "name": "url",
            "required": true,
            "value": "!input_url"
          },
          {
            "type": "string",
            "name": "format",
            "required": true,
            "value": "!input_format"
          },
          {
            "type": "string",
            "name": "separator",
            "required": true,
            "value": "!input_separator"
          }
        ],
        "engineMeta": {
          "spark": "InputOutputSteps.readHeader"
        }
      },
      {
        "id": "CREATESCHEMASTEP",
        "stepId": "61f8c038-e632-5cad-b1c6-9da6034dce5c",
        "displayName": "Create a DataFrame schema",
        "description": "This step will create a DataFrame schema from a list of column names",
        "type": "Pipeline",
        "nextStepId": "LOADFILESTEP",
        "params": [
          {
            "type": "list",
            "name": "columnNames",
            "required": true,
            "value": "@READHEADERSTEP"
          }
        ],
        "engineMeta": {
          "spark": "InputOutputSteps.createSchema"
        }
      },
      {
        "id": "LOADFILESTEP",
        "stepId": "cba8a6d8-88b6-50ef-a073-afa6cba7ca1e",
        "displayName": "Load File as Data Frame with schema",
        "description": "This step will load a file from the provided URL using the provided schema",
        "type": "Pipeline",
        "params": [
          {
            "type": "string",
            "name": "url",
            "required": true,
            "value": "!input_url"
          },
          {
            "type": "string",
            "name": "format",
            "required": true,
            "value": "!input_format"
          },
          {
            "type": "string",
            "name": "separator",
            "required": true,
            "value": "!input_separator"
          },
          {
            "type": "string",
            "name": "schema",
            "required": true,
            "value": "@CREATESCHEMASTEP"
          }
        ],
        "engineMeta": {
          "spark": "InputOutputSteps.loadFileWithSchema"
        }
      }
    ]
  },
  {
    "id": "EXTRACT_PRODUCT_DATA_PIPELINE",
    "name": "Extract Product Data Pipeline",
    "steps": [
      {
        "id": "MAPFIELDSSTEP",
        "stepId": "772912d6-ee6a-5228-ae7a-0127eb2dce37",
        "displayName": "Selects a subset of fields from a DataFrame",
        "description": "Creates a new DataFrame which is a subset of the provided DataFrame",
        "type": "Pipeline",
        "nextStepId": "GROUPDATASTEP",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "!ROOT.pipelineParameters.LOAD_DATA_PIPELINE.LOADFILESTEP.primaryReturn"
          },
          {
            "type": "list",
            "name": "fieldNames",
            "required": true,
            "value": [
              "product_id",
              "product_name",
              "cost"
            ]
          }
        ],
        "engineMeta": {
          "spark": "SplitSteps.selectFields"
        }
      },
      {
        "id": "GROUPDATASTEP",
        "stepId": "99ad5ed4-b907-5635-8f2a-1c9012f6f5a7",
        "displayName": "Performs a grouping and aggregation of the data",
        "description": "Performs a grouping across all columns in the DataFrame and aggregation using the groupByField of the data.",
        "type": "Pipeline",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "@MAPFIELDSSTEP"
          },
          {
            "type": "string",
            "name": "groupByField",
            "required": true,
            "value": "product_id"
          }
        ],
        "engineMeta": {
          "spark": "GroupingSteps.groupByField"
        }
      }
    ]
  },
  {
    "id": "EXTRACT_CUSTOMER_DATA_PIPELINE",
    "name": "Extract Customer Data Pipeline",
    "steps": [
      {
        "id": "MAPFIELDSSTEP",
        "stepId": "772912d6-ee6a-5228-ae7a-0127eb2dce37",
        "displayName": "Selects a subset of fields from a DataFrame",
        "description": "Creates a new DataFrame which is a subset of the provided DataFrame",
        "type": "Pipeline",
        "nextStepId": "GROUPDATASTEP",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "!ROOT.pipelineParameters.LOAD_DATA_PIPELINE.LOADFILESTEP.primaryReturn"
          },
          {
            "type": "list",
            "name": "fieldNames",
            "required": true,
            "value": [
              "customer_id",
              "first_name",
              "last_name",
              "email",
              "gender",
              "ein",
              "postal_code"
            ]
          }
        ],
        "engineMeta": {
          "spark": "SplitSteps.selectFields"
        }
      },
      {
        "id": "GROUPDATASTEP",
        "stepId": "99ad5ed4-b907-5635-8f2a-1c9012f6f5a7",
        "displayName": "Performs a grouping and aggregation of the data",
        "description": "Performs a grouping across all columns in the DataFrame and aggregation using the groupByField of the data.",
        "type": "Pipeline",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "@MAPFIELDSSTEP"
          },
          {
            "type": "string",
            "name": "groupByField",
            "required": true,
            "value": "customer_id"
          }
        ],
        "engineMeta": {
          "spark": "GroupingSteps.groupByField"
        }
      }
    ]
  },
  {
    "id": "EXTRACT_CREDIT_CARD_DATA_PIPELINE",
    "name": "Extract Credit Card Data Pipeline",
    "steps": [
      {
        "id": "MAPFIELDSSTEP",
        "stepId": "772912d6-ee6a-5228-ae7a-0127eb2dce37",
        "displayName": "Selects a subset of fields from a DataFrame",
        "description": "Creates a new DataFrame which is a subset of the provided DataFrame",
        "type": "Pipeline",
        "nextStepId": "GROUPDATASTEP",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "!ROOT.pipelineParameters.LOAD_DATA_PIPELINE.LOADFILESTEP.primaryReturn"
          },
          {
            "type": "list",
            "name": "fieldNames",
            "required": true,
            "value": [
              "customer_id",
              "cc_num",
              "cc_type"
            ]
          }
        ],
        "engineMeta": {
          "spark": "SplitSteps.selectFields"
        }
      },
      {
        "id": "GROUPDATASTEP",
        "stepId": "99ad5ed4-b907-5635-8f2a-1c9012f6f5a7",
        "displayName": "Performs a grouping and aggregation of the data",
        "description": "Performs a grouping across all columns in the DataFrame and aggregation using the groupByField of the data.",
        "type": "Pipeline",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "@MAPFIELDSSTEP"
          },
          {
            "type": "string",
            "name": "groupByField",
            "required": true,
            "value": "customer_id"
          }
        ],
        "engineMeta": {
          "spark": "GroupingSteps.groupByField"
        }
      }
    ]
  },
  {
    "id": "EXTRACT_ORDER_DATA_PIPELINE",
    "name": "Extract Order Data Pipeline",
    "steps": [
      {
        "id": "MAPFIELDSSTEP",
        "stepId": "772912d6-ee6a-5228-ae7a-0127eb2dce37",
        "displayName": "Selects a subset of fields from a DataFrame",
        "description": "Creates a new DataFrame which is a subset of the provided DataFrame",
        "type": "Pipeline",
        "nextStepId": "GROUPDATASTEP",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "!ROOT.pipelineParameters.LOAD_DATA_PIPELINE.LOADFILESTEP.primaryReturn"
          },
          {
            "type": "list",
            "name": "fieldNames",
            "required": true,
            "value": [
              "order_num",
              "product_id",
              "units",
              "customer_id"
            ]
          }
        ],
        "engineMeta": {
          "spark": "SplitSteps.selectFields"
        }
      },
      {
        "id": "GROUPDATASTEP",
        "stepId": "99ad5ed4-b907-5635-8f2a-1c9012f6f5a7",
        "displayName": "Performs a grouping and aggregation of the data",
        "description": "Performs a grouping across all columns in the DataFrame and aggregation using the groupByField of the data.",
        "type": "Pipeline",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "@MAPFIELDSSTEP"
          },
          {
            "type": "string",
            "name": "groupByField",
            "required": true,
            "value": "order_num"
          }
        ],
        "engineMeta": {
          "spark": "GroupingSteps.groupByField"
        }
      }
    ]
  },
  {
    "id": "WRITE_DATA_PIPELINE",
    "name": "Write Data Pipeline",
    "steps": [
      {
        "id": "PRODWRITESTEP",
        "stepId": "6b9db56d-bed7-5838-9ed4-7b5e216617c4",
        "displayName": "Writes a DataFrame to a Mongo database",
        "description": "This step will write the contents of a DataFrame to the Mongo database and collection specified",
        "type": "Pipeline",
        "nextStepId": "CUSTWRITESTEP",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "!PROD.pipelineParameters.EXTRACT_PRODUCT_DATA_PIPELINE.GROUPDATASTEP.primaryReturn"
          },
          {
            "type": "string",
            "name": "uri",
            "required": true,
            "value": "!mongoURI"
          },
          {
            "type": "string",
            "name": "collectionName",
            "required": true,
            "value": "products"
          }
        ],
        "engineMeta": {
          "spark": "InputOutputSteps.writeDataFrameToMongo"
        }
      },
      {
        "id": "CUSTWRITESTEP",
        "stepId": "6b9db56d-bed7-5838-9ed4-7b5e216617c4",
        "displayName": "Writes a DataFrame to a Mongo database",
        "description": "This step will write the contents of a DataFrame to the Mongo database and collection specified",
        "type": "Pipeline",
        "nextStepId": "CCWRITESTEP",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "!CUST.pipelineParameters.EXTRACT_CUSTOMER_DATA_PIPELINE.GROUPDATASTEP.primaryReturn"
          },
          {
            "type": "string",
            "name": "uri",
            "required": true,
            "value": "!mongoURI"
          },
          {
            "type": "string",
            "name": "collectionName",
            "required": true,
            "value": "customers"
          }
        ],
        "engineMeta": {
          "spark": "InputOutputSteps.writeDataFrameToMongo"
        }
      },
      {
        "id": "CCWRITESTEP",
        "stepId": "6b9db56d-bed7-5838-9ed4-7b5e216617c4",
        "displayName": "Writes a DataFrame to a Mongo database",
        "description": "This step will write the contents of a DataFrame to the Mongo database and collection specified",
        "type": "Pipeline",
        "nextStepId": "ORDWRITESTEP",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "!CC.pipelineParameters.EXTRACT_CREDIT_CARD_DATA_PIPELINE.GROUPDATASTEP.primaryReturn"
          },
          {
            "type": "string",
            "name": "uri",
            "required": true,
            "value": "!mongoURI"
          },
          {
            "type": "string",
            "name": "collectionName",
            "required": true,
            "value": "creditCards"
          }
        ],
        "engineMeta": {
          "spark": "InputOutputSteps.writeDataFrameToMongo"
        }
      },
      {
        "id": "ORDWRITESTEP",
        "stepId": "6b9db56d-bed7-5838-9ed4-7b5e216617c4",
        "displayName": "Writes a DataFrame to a Mongo database",
        "description": "This step will write the contents of a DataFrame to the Mongo database and collection specified",
        "type": "Pipeline",
        "params": [
          {
            "type": "string",
            "name": "dataFrame",
            "required": true,
            "value": "!ORD.pipelineParameters.EXTRACT_ORDER_DATA_PIPELINE.GROUPDATASTEP.primaryReturn"
          },
          {
            "type": "string",
            "name": "uri",
            "required": true,
            "value": "!mongoURI"
          },
          {
            "type": "string",
            "name": "collectionName",
            "required": true,
            "value": "orders"
          }
        ],
        "engineMeta": {
          "spark": "InputOutputSteps.writeDataFrameToMongo"
        }
      }
    ]
  }
]