{"pkgs":["com.acxiom.delta.steps"],"steps":[{"id":"6e6aa49d-e195-4f4f-8933-55045876ef4d","displayName":"Update Single Column for Deltalake","description":"Updates a single column for a deltalake table.","type":"Pipeline","category":"Deltalake","params":[{"type":"text","name":"path","required":true,"parameterType":"The path to the deltalake table"},{"type":"text","name":"column","required":true,"parameterType":"The column to update"},{"type":"text","name":"value","required":true,"parameterType":"The value expression to use"},{"type":"text","name":"where","required":false,"parameterType":"An optional where clause"}],"engineMeta":{"spark":"DeltaLakeSteps.updateSingle","pkg":"com.acxiom.delta.steps"},"tags":["metalus-delta_2.11-spark_2.4-1.8.0.jar"]},{"id":"14744405-f321-4caf-be8d-7e8764385aab","displayName":"Update Deltalake Table","description":"Updates one or more columns for a deltalake table.","type":"Pipeline","category":"Deltalake","params":[{"type":"text","name":"path","required":true,"parameterType":"The path to the deltalake table"},{"type":"text","name":"set","required":true,"parameterType":"Map of column names and update expressions"},{"type":"text","name":"condition","required":false,"parameterType":"An optional where clause"}],"engineMeta":{"spark":"DeltaLakeSteps.update","pkg":"com.acxiom.delta.steps"},"tags":["metalus-delta_2.11-spark_2.4-1.8.0.jar"]},{"id":"40856e4e-dcc0-4658-8982-b7a849c38694","displayName":"Delete Deltalake Table","description":"Delete records from a deltalake table.","type":"Pipeline","category":"Deltalake","params":[{"type":"text","name":"path","required":true,"parameterType":"The path to the deltalake table"},{"type":"text","name":"condition","required":false,"parameterType":"the condition used to delete records"}],"engineMeta":{"spark":"DeltaLakeSteps.delete","pkg":"com.acxiom.delta.steps"},"tags":["metalus-delta_2.11-spark_2.4-1.8.0.jar"]},{"id":"170c3d35-1047-42c1-8494-f5c9a667f3e8","displayName":"Vacuum Deltalake Table","description":"Vacuum records from a deltalake table.","type":"Pipeline","category":"Deltalake","params":[{"type":"text","name":"path","required":true,"parameterType":"The path to the deltalake table"},{"type":"double","name":"retentionHours","required":false,"parameterType":"The hours of data to retain"}],"engineMeta":{"spark":"DeltaLakeSteps.vacuum","pkg":"com.acxiom.delta.steps"},"tags":["metalus-delta_2.11-spark_2.4-1.8.0.jar"]},{"id":"95117379-bbac-400d-b9f2-dcb6ab2f2fc9","displayName":"Get Delta Table History","description":"Get the history dataFrame for a delta table.","type":"Pipeline","category":"Deltalake","params":[{"type":"text","name":"path","required":true,"parameterType":"The path to the deltalake table"},{"type":"int","name":"limit","required":false,"parameterType":"The number of previous commands to retrieve"}],"engineMeta":{"spark":"DeltaLakeSteps.history","pkg":"com.acxiom.delta.steps","results":{"primaryType":"org.apache.spark.sql.DataFrame"}},"tags":["metalus-delta_2.11-spark_2.4-1.8.0.jar"]},{"id":"79c130a7-6113-4e49-868d-a518f7eadefc","displayName":"Upsert Deltalake Table","description":"Merge a dataFrame with a deltalake table, updating matched columns and insert all others.","type":"Pipeline","category":"Deltalake","params":[{"type":"text","name":"path","required":true,"parameterType":"The path to the deltalake table."},{"type":"text","name":"source","required":true,"parameterType":"The source DataFrame to merge into the delta table."},{"type":"text","name":"mergeCondition","required":true,"parameterType":"The the join condition for the merge."},{"type":"text","name":"sourceAlias","required":false,"defaultValue":"source","parameterType":"String","description":"The alias for the source table."},{"type":"text","name":"targetAlias","required":false,"defaultValue":"target","parameterType":"String","description":"The alias for the delta table."},{"type":"text","name":"whenMatched","required":false,"parameterType":"Optional condition for the whenMatched clause."},{"type":"text","name":"whenNotMatched","required":false,"parameterType":"Optional condition for the whenNotMatched clause."}],"engineMeta":{"spark":"DeltaLakeSteps.upsert","pkg":"com.acxiom.delta.steps"},"tags":["metalus-delta_2.11-spark_2.4-1.8.0.jar"]},{"id":"5be03a66-094d-4831-9339-b3e8ad89a8b2","displayName":"Merge Deltalake Table","description":"Merge a dataFrame with a deltalake table.","type":"Pipeline","category":"Deltalake","params":[{"type":"text","name":"path","required":true,"parameterType":"The path to the deltalake table."},{"type":"text","name":"source","required":true,"parameterType":"The source DataFrame to merge into the delta table."},{"type":"text","name":"mergeCondition","required":true,"parameterType":"The the join condition for the merge."},{"type":"text","name":"sourceAlias","required":false,"defaultValue":"source","parameterType":"String","description":"The alias for the source table. Default is \\'source\\'."},{"type":"text","name":"targetAlias","required":false,"defaultValue":"target","parameterType":"String","description":"The alias for the delta table. Default is \\'target\\'."},{"type":"object","name":"whenMatched","required":false,"language":"com.acxiom.delta.steps.MatchCondition","className":"com.acxiom.delta.steps.MatchCondition","parameterType":"Condition and expression pair for matched records."},{"type":"object","name":"deleteWhenMatched","required":false,"language":"com.acxiom.delta.steps.MatchCondition","className":"com.acxiom.delta.steps.MatchCondition","parameterType":"Condition for deleting records when matched."},{"type":"object","name":"whenNotMatched","required":false,"language":"com.acxiom.delta.steps.MatchCondition","className":"com.acxiom.delta.steps.MatchCondition","parameterType":"Condition and expression pair for insert records when not matched."}],"engineMeta":{"spark":"DeltaLakeSteps.merge","pkg":"com.acxiom.delta.steps"},"tags":["metalus-delta_2.11-spark_2.4-1.8.0.jar"]}],"pkgObjs":[{"id":"com.acxiom.delta.steps.MatchCondition","schema":"{\"$schema\":\"http://json-schema.org/draft-07/schema#\",\"title\":\"Match Condition\",\"type\":\"object\",\"additionalProperties\":false,\"properties\":{\"matchCondition\":{\"type\":\"string\"},\"expressions\":{\"type\":\"object\",\"additionalProperties\":{\"type\":\"string\"}}}}"}]}
